import com.sun.org.apache.xalan.internal.xsltc.compiler.Copy

/*
* Copyright 2002-2010 the original author or authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*      http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

// -----------------------------------------------------------------------------
// Task definitions and configuration relating to the SpringSource 'bundlor'
// OSGi manifest generation utility.
//
// @author cbeams
// see: http://www.springsource.org/bundlor
// -----------------------------------------------------------------------------

/**
 * Generate an OSGi manifest using the ant bundlor task.
 *
 * @author ltaylor
 * @author cbeams
 * @see http://static.springsource.org/s2-bundlor/1.0.x/user-guide/html/ch04s02.html
 */

task war_bundlor(dependsOn: compileJava) {
    description = 'Generates an OSGi-compatibile MANIFEST.MF file.'

    def template = new File(projectDir, 'template.mf')
    def bundlorDir = new File("${project.buildDir}/bundlor")
    def bundlorInputDir = new File("${project.buildDir}/bundlor/input")
    def manifest = file("${bundlorDir}/META-INF/MANIFEST.MF")

    // inform gradle what directory this task writes so that
    // it can be removed when issuing `gradle cleanBundlor`
    outputs.dir bundlorDir

    // incremental build configuration
    //   if the $manifest output file already exists, the bundlor
    //   task will be skipped *unless* any of the following are true
    //   * template.mf has been changed
    //   * main classpath dependencies have been changed
    //   * main java sources for this project have been modified
    outputs.files manifest
    inputs.files template, project.sourceSets.main.runtimeClasspath

    // tell the jar task to use bundlor manifest instead of the default
    war.manifest.from manifest

    // the bundlor manifest should be evaluated as part of the jar task's
    // incremental build
    war.inputs.files manifest

    // configuration that will be used when creating the ant taskdef classpath
    configurations { bundlorconf }
    dependencies {
        bundlorconf 'com.springsource.bundlor:com.springsource.bundlor.ant:1.0.0.RELEASE',
                'com.springsource.bundlor:com.springsource.bundlor:1.0.0.RELEASE',
                'com.springsource.bundlor:com.springsource.bundlor.blint:1.0.0.RELEASE'
    }

    doFirst {
        ant.taskdef(resource: 'com/springsource/bundlor/ant/antlib.xml',
                    classpath: configurations.bundlorconf.asPath)

        def extendedTemplate = ""// = template.getText().trim() + "\n"
        for(String line : template.readLines() )
        {
            if ( line.isEmpty() )
                continue;
            if ( line.startsWith( "Bundle-Version:" ) )
                continue
            extendedTemplate += line +'\n'
        }

        def osgiVersion =  "$project.version".replaceFirst('(\\d+)\\.(\\d+)\\.(\\d+)-', '$1.$2.$3.')
        def osgiImplementaionVersion =  "$project.version-$rootProject.hgVersion".replaceFirst('(\\d+)\\.(\\d+)\\.(\\d+)-', '$1.$2.$3.')

        extendedTemplate += "Bundle-Version: $osgiVersion\n"
        extendedTemplate += "Implementation-Version: $osgiImplementaionVersion\n"

        println "========================================="
        println extendedTemplate
        println "========================================="

        // the ant task will throw unless this dir exists
        if (!bundlorDir.isDirectory())
            bundlorDir.mkdir()
        if (!bundlorInputDir.isDirectory())
            bundlorInputDir.mkdir()
        if (!sourceSets.main.output.classesDir.isDirectory())
            sourceSets.main.output.classesDir.mkdirs()

        // the bundlor ant task writes directly to standard out
        // redirect it to INFO level logging, which gradle will
        // deal with gracefully
        logging.captureStandardOutput(LogLevel.INFO)

        // bundlor only supports one input dir, so we need to merge classes and resources, namely the spring files
        if (sourceSets.main.output.classesDir.isDirectory())
            ant.copy(todir: "$bundlorInputDir") {
               fileset dir: "$sourceSets.main.output.classesDir"
            }
        if (sourceSets.main.output.resourcesDir.isDirectory())
            ant.copy(todir: "$bundlorInputDir") {
               fileset dir: sourceSets.main.output.resourcesDir
            }

        // execute the ant task, and write out the $manifest file
        ant.bundlor(inputPath: bundlorInputDir,
                    outputPath: bundlorDir,
        ) {
            manifestTemplate( extendedTemplate )
            property(name: 'version', value: project.version)
//            property(name: 'spring.version', value: project.springVersion)
        }

        // remove the merged input
        ant.delete( dir: bundlorInputDir )
    }
}

// ensure that the bundlor task runs prior to the jar task
war.dependsOn war_bundlor

